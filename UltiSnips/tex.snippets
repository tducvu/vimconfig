global !p
texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC', 'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES', 'AmsFS', 'AmsGS' ]]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
def create_row_placeholders(snip):
    # retrieving singlee line from current string and treat it like tabstops
    # count
    placeholders_amount = int(snip.buffer[snip.line].strip())

    # erase current line
    snip.buffer[snip.line] = ''

    # create anonymous snippet with expected content and number of tabstops
    anon_snippet_body = ' & '.join(['$' + str(i+1)
                                    for i in range(placeholders_amount)])

    # expand anonymous snippet
    snip.expand_anon(anon_snippet_body)
endglobal

post_jump "create_row_placeholders(snip)"
snippet "(\d+)e" "latex table row variable" br
`!p snip.rv = match.group(1)`
endsnippet

snippet hwtemplate "Basic template" bA
\documentclass{/home/blackbox/Documents/Latex/uni/duchw}
\usepackage[utf8]{inputenc}
\usepackage{mathtools,commath}
\usepackage{amsmath,amsthm,amssymb}
\usepackage{graphicx}

\author{Duc Vu}
\title{Math $1 -- $2}

\begin{document}

\\maketitle

$0

\end{document}
endsnippet

snippet notetemplate "Notes Template" bA
\input{../preamble/preambleV2}
\input{../preamble/macros}
\graphicspath{{figures/}}

\title{\textbf{$1} \\\ \Large{University of California, Los Angeles}}
\author{Duc Vu}
\date{$2}

\begin{document}

\maketitle
\thispagestyle{empty}
\begin{abstract}
	$3
\end{abstract}
\tableofcontents
\listoftheorems[ignoreall,show={theorem}]
\renewcommand{\listtheoremname}{List of Definitions}
\listoftheorems[ignoreall,show={definition}]
\newpage
\input{../formatting/sectionFormat}

$0

\end{document}
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet eqn "equation" bA
\begin{equation}
	$1
\end{equation}$0
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[H]
	\centering
	\includegraphics[width=0.$1\textwidth]{fig$2}
\end{figure}
$0
endsnippet

snippet enum "Enumerate" b
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet enumi "Enumerate with roman" bA
\begin{enumerate}[i)]
	\item $0
\end{enumerate}
endsnippet

snippet enuma "Enumerate with alph" bA
\begin{enumerate}[a)]
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

priority 20
context "math()"
snippet bcompl "sub/sup before/after" iA
\prescript{c}{}{$1}^{}_{} $0
endsnippet

snippet => "implies" Ai
\implies 
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

snippet mm "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
\] $0
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
\end{align*}
endsnippet

snippet gat "gather" bA
\begin{gather*}
	${1:${VISUAL}}
\end{gather*}
endsnippet

snippet ex "example" bA
\begin{example}
	${1:${VISUAL}}
\end{example}
endsnippet

context "math()"
snippet binom "combination (n choose x)" iA
\\binom{$1}{$2}$0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

snippet == "equals" iA
&= $1 \\\\
endsnippet

snippet != "not equals" iA
\neq 
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet vmat "vmat" iA
\begin{vmatrix} $1 \end{vmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right)$0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right)$0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right)$0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right|$0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\}$0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

snippet sum "sum" w
\sum_{k=${1:1}}^{${2:\infty}} ${3:a_n}
endsnippet

snippet ssum "sum" w
\sum_{n \ge ${1:1}}${2:a_n}
endsnippet

snippet taylor "taylor" w
\sum_{${1:n}=${2:0}}^{${3:\infty}} ${4:a_$1} (x-x_0)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet liminf "liminf" w
\liminf_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

context "math()"
snippet seq "sequence" wA
\left\\{ $1_$2 \right\\}_{$2 \ge 1} $0
endsnippet

context "math()"
snippet partial "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet r2 "\sqrt{}" iA
\sqrt{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet sq "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet tp "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet oo "\infty" iA
\infty
endsnippet

snippet <= "leq" iA
\le 
endsnippet

snippet >= "geq" iA
\ge 
endsnippet

context "math()"
snippet EE "there exists" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet


context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

snippet tikz "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		$2
	\end{tikzpicture}
	\caption{$3}
	\label{$4}
\end{figure}
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet mscr "mathscr" iA
\mathscr{$1}$0
endsnippet

context "math()"
snippet mbf "mathbf" iA
\mathbf{$1}$0
endsnippet

context "math()"
snippet MU "bold mu" iA
\boldsymbol{\mu}
endsnippet

context "math()"
snippet nab "nabla" iA
\nabla 
endsnippet

priority 100
snippet ** "cdot" i
\cdot 
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|tan|cot|csc|sec|ln|log|exp|star|perp|xi|omega)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(alpha|beta|gamma|phi|theta|zeta|delta|epsilon|mu|lambda|sigma)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|int|rho)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet


priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

priority 200
context "math()"
snippet --> "longrightarrow" iA
\longrightarrow 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet


snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

context "math()"
snippet cc "subset" iA
\subseteq
endsnippet

context "math()"
snippet pcc "proper subset" iA
\subsetneq
endsnippet

context "math()"
snippet notin "not in " iA
\notin 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

snippet Nn "cap" iA
\cap 
endsnippet

snippet UU "cup" iA
\cup 
endsnippet

snippet uuu "bigcup" iA
\bigcup_{$1}^{$2} $0
endsnippet

snippet nnn "bigcap" iA
\bigcap_{$1}^{$2} $0
endsnippet

snippet OO "emptyset" iA
\emptyset
endsnippet

snippet hs "Horizontal space" i
\hspace{.$1in}$0
endsnippet

snippet RR "R" iA
\mathbb{R}$0
endsnippet

snippet QQ "Q" iA
\mathbb{Q}$0
endsnippet

snippet ZZ "Z" iA
\mathbb{Z}$0
endsnippet

snippet NN "natural" iA
\mathbb{N}$0
endsnippet

snippet CC "complex" iA
\mathbb{C}$0
endsnippet

snippet sect "section" i
\section{$1}$0
endsnippet

snippet ssect "subsection" iA
\subsection{$1}$0
endsnippet

snippet sssect "subsubsection" iA
\subsubsection{$1}$0
endsnippet

context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

context "math()"
snippet rcase "rcases" wA
\begin{rcases}
	$1
\end{rcases}
endsnippet

snippet case "cases" i
\textbf{\underline{Case $1:}} $0
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet hat "hat" iA
\hat{$1}$0
endsnippet

priority 20
context "math()"
snippet widehat "widehat" iA
\widehat{$1}$0
endsnippet

context "math()"
snippet laplace "Laplace transform" i
\laplace\\{$1\\}$0
endsnippet

snippet note "Note:" b
\underline{\emph{Note}}:
endsnippet

snippet section "section" b
\textbf{\underline{$1}}\\$0
endsnippet

snippet emph "emphasize" i
\emph{$1}$0
endsnippet

snippet underl "underline" i
\underline{$1}$0
endsnippet

context "math()"
snippet space ", and space" iA
\text{,} \hspace{.1in}
endsnippet

context "math()"
snippet vec "vector" iA
\vec{$1}$0
endsnippet

context "math()"
snippet qed "black square" i
\blacksquare
endsnippet

context "math()"
snippet array "matrix with square bracket" iA
\begin{array}{$1}
	$0
\end{array}
endsnippet

snippet textcolor "set text color" iA
\textcolor{${1:color}}{${2:text}} $0
endsnippet

snippet ubrace "under brace" iA
\underbrace{$1}_{$2} $3
endsnippet

snippet noin "no indent" bA
\noindent$0
endsnippet

snippet := "conlon equal" iA
\coloneqq
endsnippet

snippet figz "tikzit" bA
\ctikzfig{fig$1}
$0
endsnippet

context "math()"
snippet <> "inner product space" iA
\langle $1 \rangle $0
endsnippet

context "math()"
snippet ovs "overset -- symbol on top" iA
\overset{$1}{$2} $0
endsnippet

context "math()"
snippet uds "underset -- symbol on bottom" iA
\underset{$1}{$2} $0
endsnippet

context "math()"
snippet ocal "error term" iA
\mathcal{O}($1) $0
endsnippet

#vim:ft=snippets
